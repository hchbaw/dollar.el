(eval-when-compile (require 'cl))
(require 'cl-lib)
(require 'dollar)
(require 'ert)

(defvar $-test-counter 0)

(defmacro $-test (form)
  (let ((testsym (intern (format "$-test-%s" (cl-incf $-test-counter)))))
    `(ert-deftest ,testsym () ,form )))

(defun dollar-test-initialize ()
  (macrolet ((test (val form) `($-test (should (equal ,val ,form)))))
    (test '(0 1)
          ($ list 0 1))
    (test '(0 1 (2 3 (4 5 (6 7))))
          ($ list 0 1 $ list 2 3 $ list 4 5 $ list 6 7))
    (test '(0 1 (2 3 4 5 6 7))
          ($ list 0 1 $ 'list 2 3 $* 'list 4 5 $* list 6 7))
    (test '(0 1 2 3 (4 5 6 7))
          ($ 'list 0 1 $* list 2 3 $ 'list 4 5 $* list 6 7))
    (test '(0 1 2 3 4 5 (6 7))
          ($ 'list 0 1 $* 'list 2 3 $* list 4 5 $ list 6 7))
    (test '(0 1 (2 3 (4 5 a)))
          (funcall ($ list 0 1 $ list 2 3 $ list 4 5 $) 'a))
    (test '(0 1 2 3 4 5 a)
          (funcall ($ 'list 0 1 $* 'list 2 3 $* list 4 5 $) 'a))
    (test '(0 1 (2 3 (4 5 a b)))
          (funcall ($ list 0 1 $ list 2 3 $ 'list 4 5 $*) 'a 'b))))
